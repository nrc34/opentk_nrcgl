#version 400

layout (location = 0) in vec3 vertex_position;
layout (location = 1) in vec3 vertex_normal;

out vec3 LightIntensity;

uniform vec4 light_position; // Light position in eye coords.
uniform vec3 kd; // Diffuse reflectivity
uniform vec3 ld; // Light source intensity

uniform mat4 modelview_matrix;
uniform mat3 normal_matrix;
uniform mat4 projection_matrix;
uniform mat4 mvp_matrix; // Projection * ModelView

void main()
{
  // Convert normal and position to eye coords
  vec3 tnorm = normalize( normal_matrix * vertex_normal);
  vec4 eyeCoords = modelview_matrix *
                   vec4(vertex_position,1.0);
  vec3 s = normalize(vec3(light_position - eyeCoords));
  
  // The diffuse shading equation
  LightIntensity = ld * kd * max( dot( s, tnorm ), 0.0 );
  
  // Convert position to clip coordinates and pass along
  gl_Position = mvp_matrix * vec4(vertex_position,1.0);
}