#version 400
uniform samplerCube cubeMapTex;
uniform vec3 light_position;
uniform vec3 eyePosition;

in Attributes
{
	vec3 position;
	vec3 normal;
	vec2 uv;
} att;

in vec4 colorout;

out vec4 fragColor;

void main()
{
    //vec4 color = texture(TextureUnit0, att.uv);

	vec4 color = vec4(0.3, 0.2, 0.8, 0.5);

	//vec4 color = colorout;
	
	vec3 toEye = -att.position;
	vec3 toLight = light_position - att.position;
    
    vec3 nN = normalize(att.normal);
    vec3 nE = normalize(toEye);
    vec3 nL = normalize(toLight);
    vec3 nR = normalize(reflect(-nL, nN));
	vec3 eyeRay = normalize(att.position - eyePosition);


	
	//vec3 reflection = texture(cubeMapTex, reflect(eyeRay, nN)).rgb;
	//vec3 reflection = texture(cubeMapTex, nR).rgb;
    //vec3 refraction = texture(cubeMapTex, refract(eyeRay, att.normal, 1.1)).rgb;
    
	vec3 tc = reflect(-att.position, att.normal);

    float lambert = max(dot(nN, nL), 0);
    float phong = 0;
    if(lambert > 0)
        phong = pow(max(dot(nE, nR), 0), 10);

	vec3 solidColor = vec3(color * (lambert + phong)); 
	//vec3 solidColor = mix(vec3(color * (lambert + phong)), reflection, 1f); 
    //vec3 fcolor = mix(refraction, solidColor, 1f);

	//fragColor = vec4(fcolor, 1.0);
	//fragColor = color;
	//fragColor = vec4(reflection, 1.0);
	fragColor = mix(texture(cubeMapTex, tc * vec3(1, 1, -1)) , vec4(solidColor, 1f), 0.4);
	//fragColor = texture(cubeMapTex, tc * vec3(1, 1, -1));
}