#version 400
uniform sampler2D TextureUnit0;
uniform sampler2DShadow TextureUnit1;
uniform vec3 light_position;
uniform vec3 ambient_light;
uniform vec3 material_ambient;
uniform vec3 material_diffuse;
uniform vec3 material_specular;
uniform float material_shininess;
uniform vec3 camera_position;

uniform vec3 point_light_position;
uniform vec3 point_light_color;
uniform float point_light_intensity;

uniform vec3 spot_light_position;
uniform vec3 spot_light_color;
uniform vec3 spot_light_cone_direction;
uniform float spot_light_cone_angle;
uniform float spot_light_intensity;

in Attributes
{
	vec3 position;
	vec4 normal;
	vec2 uv;
	vec4 shadowcoord;
	vec4 worldposition;
} att;

in vec4 colorout;

out vec4 fragColor;

void main()
{
	// point light
	vec4 PointLightPosition = vec4(point_light_position, 0f); //vec4(-30f, 5f, -30f, 0f);
	vec4 PointLightDistance = PointLightPosition - att.worldposition;
	float d = length(PointLightDistance.xyz) * point_light_intensity;

	// spot light
	vec4 SpotLightPosition = vec4(spot_light_position, 0f); 
	vec4 SpotLightDistance = att.worldposition - SpotLightPosition;
	float angleSpotLight = acos(dot(normalize(spot_light_cone_direction), normalize(SpotLightDistance.xyz)));

	float d1 = length(SpotLightDistance.xyz) * spot_light_intensity;


    vec4 color = texture(TextureUnit0, att.uv);

	//vec4 color = vec4(0.5f, 0f, 0f, 0f);

	//vec4 color = colorout;
	
	vec3 toEye = camera_position - att.worldposition.xyz;
	vec3 toLight = light_position - att.worldposition.xyz;
    
    vec3 nN = normalize(att.normal.xyz);
    vec3 nE = normalize(toEye);
    vec3 nL = normalize(toLight);
    vec3 nR = normalize(reflect(-nL, nN));
    
    float lambert = max(dot(nN, nL), 0);
    float phong = 0;
    if(lambert > 0)
        phong = pow(max(dot(nE, nR), 0), 30);//material_shininess);

	float f = textureProj(TextureUnit1, att.shadowcoord);
    

	 

	float spotLightAtenuation;
	if(angleSpotLight > spot_light_cone_angle)
		spotLightAtenuation = 0;						
	else if(angleSpotLight > (spot_light_cone_angle - spot_light_cone_angle * 0.10f))
		spotLightAtenuation = 0.4f;
	else if(angleSpotLight > (spot_light_cone_angle - spot_light_cone_angle * 0.05f))
		spotLightAtenuation = 0.7f;
	else 
		spotLightAtenuation = 1;


	
	vec3 ambient = mix(color.xyz * ambient_light, material_ambient * ambient_light, 0);
	vec3 diffuse = mix(ambient * lambert,  ambient_light * material_diffuse * lambert, 0);
	vec3 specular = mix(ambient * phong, ambient_light * material_specular * phong, 0);

	fragColor = vec4((diffuse + specular + point_light_color * (1 / pow(d, 2)) + spot_light_color * (spotLightAtenuation / pow(d1, 2)))* f, color.w);

	//fragColor = vec4((color * (lambert + phong)).xyz * f, 1);
	//fragColor = color;
}