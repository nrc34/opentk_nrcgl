#version 400
uniform sampler2D TextureUnit0;
uniform vec3 light_position;
uniform vec3 ambient_light;
uniform vec3 material_ambient;
uniform vec3 material_diffuse;
uniform vec3 material_specular;
uniform float material_shininess;
uniform vec3 camera_position;


in Attributes
{
	vec3 position;
	vec4 normal;
	vec2 uv;
	vec4 worldposition;
	vec4 shadowcoord;
} att;

in vec4 colorout;

out vec4 fragColor;

void main()
{
    //vec4 color = texture(TextureUnit0, att.uv);

	//vec4 color = vec4(0.5f, 0f, 0f, 0f);

	vec4 color = colorout;
	
	//vec3 toEye = -att.position;
	vec3 toEye = camera_position - att.worldposition.xyz;
	//vec3 toLight = light_position - att.position;
	vec3 toLight = light_position - att.worldposition.xyz;
    
    vec3 nN = normalize(att.normal.xyz);
    vec3 nE = normalize(toEye);
    vec3 nL = normalize(toLight);
    vec3 nR = normalize(reflect(-nL, nN));
    
    float lambert = max(dot(nN, nL), 0);
    float phong = 0;
    if(lambert > 0)
        phong = pow(max(dot(nE, nR), 0), material_shininess);
    
	//fragColor = vec4((color * (lambert + phong)).xyz, 1);

	vec3 ambient = mix(color.xyz * ambient_light, material_ambient * ambient_light, 0.1);
	vec3 diffuse = mix(ambient * lambert,  ambient_light * material_diffuse * lambert, 0.1);
	vec3 specular = mix(ambient * phong, ambient_light * material_specular * phong, 0.9);

	fragColor = vec4(diffuse + specular, color.w);
}