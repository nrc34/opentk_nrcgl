#version 400
uniform sampler2D TextureUnit0;
uniform sampler2DShadow TextureUnit1;
uniform sampler2D TextureUnit2;
uniform vec3 light_position;

uniform vec3 point_light_position;
uniform vec3 point_light_color;
uniform float point_light_intensity;

uniform vec3 spot_light_position;
uniform vec3 spot_light_color;
uniform vec3 spot_light_cone_direction;
uniform float spot_light_cone_angle;
uniform float spot_light_intensity;



in Attributes
{
	vec3 position;
	vec3 normal;
	vec2 uv;
	vec4 shadowcoord;
	vec4 worldposition;
	vec4 texcoord;
} att;

in vec4 colorout;

out vec4 fragColor;

void main()
{
	// point light
	vec4 PointLightPosition = vec4(point_light_position, 0f); //vec4(-30f, 5f, -30f, 0f);
	vec4 PointLightDistance = PointLightPosition - att.worldposition;
	float d = length(PointLightDistance.xyz) * point_light_intensity;


	// spot light
	vec4 SpotLightPosition = vec4(spot_light_position, 0f); 
	vec4 SpotLightDistance = att.worldposition - SpotLightPosition;
	float angleSpotLight = acos(dot(normalize(spot_light_cone_direction), normalize(SpotLightDistance.xyz)));
	
	

	float d1 = length(SpotLightDistance.xyz) * spot_light_intensity;

	//vec3 N = 2.0 * texture(TextureUnit2, att.uv).rgb - 1.0;
	vec3 N = 2.0 * texture2DProj(TextureUnit2, att.texcoord).rgb -1.0;
    //vec4 color = texture(TextureUnit0, att.uv);

	//vec4 color = vec4(0.5f, 0f, 0f, 1f);

	//vec4 color = colorout;
	
	vec3 toEye = -att.position;
	vec3 toLight = light_position - att.position;
    
    //vec3 nN = normalize(att.normal);
	vec3 nN = normalize(N);
    vec3 nE = normalize(toEye);
    vec3 nL = normalize(toLight);
    vec3 nR = normalize(reflect(-nL, nN));
    
    float lambert = max(dot(nN, nL), 0.0);
    float phong = 0;
    //if(lambert > 0)
        //phong = pow(max(dot(nE, nR), 0.0), 10);

	float of = 0.15;

	float f = 0; //textureProj(TextureUnit1, att.shadowcoord + vec4(0,0,of,0));
	//f += textureProj(TextureUnit1, att.shadowcoord + vec4(0,of,0,0));
	//f += textureProj(TextureUnit1, att.shadowcoord + vec4(0,of,of,0));
	//f += textureProj(TextureUnit1, att.shadowcoord + vec4(of,0,0,0));
	//f += textureProj(TextureUnit1, att.shadowcoord + vec4(of,0,of,0));
	//f += textureProj(TextureUnit1, att.shadowcoord + vec4(of,of,0,0));
	//f += textureProj(TextureUnit1, att.shadowcoord + vec4(of,of,of,0));
	f += textureProj(TextureUnit1, att.shadowcoord + vec4(0,0,0,0));
	//f /= 4;
	//f += 0.1;

	vec4 color = texture2DProj(TextureUnit0, att.texcoord);
    
	//fragColor = textColor * f;
	float spotLightAtenuation;
	if(angleSpotLight > spot_light_cone_angle)
		spotLightAtenuation = 0;						
	else if(angleSpotLight > (spot_light_cone_angle - spot_light_cone_angle * 0.10f))
		spotLightAtenuation = 0.4f;
	else if(angleSpotLight > (spot_light_cone_angle - spot_light_cone_angle * 0.05f))
		spotLightAtenuation = 0.7f;
	else 
		spotLightAtenuation = 1;

	fragColor = vec4(((color * 1.1 * (lambert + phong)).xyz  + point_light_color * (1 / pow(d, 2)) + spot_light_color * (spotLightAtenuation / pow(d1, 2)))* f, 1);
	//fragColor = color * f;
	//if(att.position.x > 0) fragColor = color;
	
}