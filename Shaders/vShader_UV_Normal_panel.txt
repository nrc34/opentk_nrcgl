#version 400
layout(location = 0) in vec3 vertex_position;
layout(location = 1) in vec3 vertex_normal;
layout(location = 2) in vec2 vertex_texcoord;
layout(location = 3) in vec4 vertex_color;

//uniform mat4 MatrixModel;
//uniform mat4 MatrixView;
uniform mat4 modelview_matrix;
uniform mat4 projection_matrix;
uniform mat4 shadow_matrix;
uniform mat4 model_matrix;
uniform mat4 texture_matrix;
uniform bool is_using_normalmap;


out vec4 colorout;

out Attributes
{
	vec3 position;
	vec4 normal;
	vec4 normalVB;
	vec2 uv;
	vec4 shadowcoord;
	vec4 worldposition;
	vec4 texcoord;
	mat3 mat;
} att;

void main()
{
    //mat4 MV =  * shadow_matrix;
	
	vec3 vertexViewSpacePosition = (modelview_matrix * vec4(vertex_position, 1.0)).xyz;
    
	att.position		= vertexViewSpacePosition;
	att.worldposition   = model_matrix * vec4(vertex_position, 1.0);
	att.normal 			= model_matrix * vec4(vertex_normal, 0);
	att.uv				= vertex_texcoord;
	att.shadowcoord     = shadow_matrix * att.worldposition;
	att.texcoord        = texture_matrix * att.worldposition;
	if(is_using_normalmap){
		vec3 tangent;
		vec3 v1 = cross(vertex_normal.xyz, vec3(0,0,-1));
		vec3 v2 = cross(vertex_normal.xyz, vec3(0,-1,0));

		if(length(v1)>length(v2))
			tangent = v1;
		else
			tangent = v2;

		vec3 n = normalize(att.normal.xyz);
		vec3 t = normalize(model_matrix * vec4(tangent, 0)).xyz;
		vec3 b = cross(n,t);

		mat3 mat = mat3(t.x, b.x, n.x, t.y, b.y, n.y, t.z, b.z, n.z);
		att.mat = mat;
	}
	
	colorout = vertex_color;

	gl_Position = projection_matrix * vec4(vertexViewSpacePosition, 1.0);
}